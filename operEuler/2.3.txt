// 1. kernel/sched/sched.h
struct rt_rq {
    struct sched_rt_entity *last_enq_se;      // 新加字段
    int                     last_enq_prio;    // 新加字段
};

// 2. kernel/sched/rt.c
void init_rt_rq()
{
    /* ... */

    /* delimiter for bitsearch: */
    __set_bit(MAX_RT_PRIO, array->bitmap);
    // 该行以上保持不变

    // 学生TODO: 请添加代码1
    rq->rt.last_enq_se = NULL;
    rq->rt.last_enq_prio = 0;
}

// 3. kernel/sched/rt.c
static void __enqueue_rt_entity(struct sched_rt_entity *rt_se, unsigned int flags)
{
    /* ... */

    if (group_rq && (rt_rq_throttled(group_rq) || !group_rq->rt_nr_running)) {
        if (rt_se->on_list)
            __delist_rt_entity(rt_se, array);
        return;
    }
    // 该行以上保持不变

    // 学生TODO: 请添加代码2
    if (rt_rq->last_enq_se != NULL) {
        rt_se->next = rt_rq->last_enq_se->next;
        rt_se->prev = rt_rq->last_enq_se;
        rt_rq->last_enq_se->next = rt_se;
        rt_se->next->prev = rt_se;
    } else {
        if (flags & ENQUEUE_HEAD)
            list_add(&rt_se->run_list, queue);
        else {
            // 学生TODO: 请添加代码3
            list_add_tail(&rt_se->run_list, queue);
        }
    }

    __set_bit(rt_se_prio(rt_se), array->bitmap);
    rt_se->on_list = 1;
    rt_se->on_rq = 1;

    rt_rq->last_enq_se = rt_se;
    rt_rq->last_enq_prio = rt_se_prio(rt_se);
}
